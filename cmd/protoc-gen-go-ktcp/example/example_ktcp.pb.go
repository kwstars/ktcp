// Code generated by protoc-gen-go-ktcp. DO NOT EDIT.
// versions:
// protoc-gen-go-ktcp v0.0.1

package example

import (
	context "context"
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	ktcp "github.com/kwstars/ktcp"
	packing "github.com/kwstars/ktcp/packing"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(fmt.Stringer)
var _ = new(context.Context)
var _ = new(errors.Error)
var _ = new(ktcp.Server)
var _ = new(packing.Packer)

type handlerFunc func(ctx ktcp.Context, srv UserServiceKTCPServer) error

type UserServiceKTCPServer interface {
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

var handleFunctions = map[uint32]handlerFunc{
	uint32(ID_ID_LOGIN_REQUEST):       _UserService_Login0_KTCP_Handler,
	uint32(ID_ID_CREATE_ROLE_REQUEST): _UserService_CreateRole0_KTCP_Handler,
}

func Router(ctx ktcp.Context, srv UserServiceKTCPServer) (err error) {
	if f, exist := handleFunctions[uint32(ctx.GetReqMsg().ID)]; !exist {
		return fmt.Errorf("not found handler func for %v", ctx.GetReqMsg().ID)
	} else {
		return f(ctx, srv)
	}
}

func _UserService_Login0_KTCP_Handler(ctx ktcp.Context, srv UserServiceKTCPServer) error {
	var in LoginRequest
	if err := ctx.Bind(&in); err != nil {
		return err
	}
	h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Login(ctx, req.(*LoginRequest))
	})
	out, err := h(ctx, &in)
	if err != nil {
		se := errors.FromError(err)
		return ctx.SendError(uint32(ID_ID_LOGIN_RESPONSE), se)
	}
	if SaveErr := ctx.Save(); SaveErr != nil {
		if SendErr := ctx.SendError(uint32(ID_ID_LOGIN_RESPONSE), errors.InternalServer("database", "数据库错误")); err != nil {
			return fmt.Errorf("SaveErr: %v, SendErr: %v", SaveErr, SendErr)
		}
		return fmt.Errorf("%v", SaveErr)
	}
	reply := out.(*LoginResponse)
	return ctx.Send(uint32(ID_ID_LOGIN_RESPONSE), reply)
}

func _UserService_CreateRole0_KTCP_Handler(ctx ktcp.Context, srv UserServiceKTCPServer) error {
	var in CreateRoleRequest
	if err := ctx.Bind(&in); err != nil {
		return err
	}
	h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateRole(ctx, req.(*CreateRoleRequest))
	})
	out, err := h(ctx, &in)
	if err != nil {
		se := errors.FromError(err)
		return ctx.SendError(uint32(ID_ID_CREATE_ROLE_RESPONSE), se)
	}
	if SaveErr := ctx.Save(); SaveErr != nil {
		if SendErr := ctx.SendError(uint32(ID_ID_CREATE_ROLE_RESPONSE), errors.InternalServer("database", "数据库错误")); err != nil {
			return fmt.Errorf("SaveErr: %v, SendErr: %v", SaveErr, SendErr)
		}
		return fmt.Errorf("%v", SaveErr)
	}
	reply := out.(*CreateRoleResponse)
	return ctx.Send(uint32(ID_ID_CREATE_ROLE_RESPONSE), reply)
}
