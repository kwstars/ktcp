package main

import (
	"fmt"

	"github.com/pinzolo/casee"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage       = protogen.GoImportPath("context")
	transportKTCPPackage = protogen.GoImportPath("github.com/kwstars/ktcp")
	errorsPackage        = protogen.GoImportPath("github.com/go-kratos/kratos/v2/errors")
	packingPackage       = protogen.GoImportPath("github.com/kwstars/ktcp/packing")
)

// generateFile generates a _http.pb.go file containing kratos errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File, omitempty bool) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_ktcp.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-ktcp. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// protoc-gen-go-ktcp %s", release))
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g, omitempty)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitempty bool) {
	if len(file.Services) == 0 {
		return
	}
	//g.P("// This is a compile-time assertion to ensure that this generated file")
	//g.P("// is compatible with the kratos package it is being compiled against.")
	g.P("var _ = new(", contextPackage.Ident("Context"), ")")
	g.P("var _ = new(", errorsPackage.Ident("Error"), ")")
	g.P("var _ = new(", transportKTCPPackage.Ident("Server"), ")")
	g.P("var _ = new(", packingPackage.Ident("Packer"), ")")
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service, omitempty)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, omitempty bool) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// KTCP Server.
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}

		pReqID := "ID_ID_" + casee.ToUpperCase(string(method.Desc.Name())) + "_REQUEST"
		pRespID := "ID_ID_" + casee.ToUpperCase(string(method.Desc.Name())) + "_RESPONSE"
		sd.Methods = append(sd.Methods, &methodDesc{
			Name:           string(method.Desc.Name()),
			Request:        g.QualifiedGoIdent(method.Input.GoIdent),
			Reply:          g.QualifiedGoIdent(method.Output.GoIdent),
			ProtocolReqID:  pReqID,
			ProtocolRespID: pRespID,
		})
	}

	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

const deprecationComment = "// Deprecated: Do not use."
